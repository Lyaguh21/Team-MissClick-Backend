// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  login     String   @unique
  name      String
  password  String
  roles     Role[]
  createdAt DateTime @default(now())
  deleted   Boolean  @default(false)

  CreatedTasks   Task[]          @relation("CreatedTasks")
  AssignedTasks  Task[]          @relation("AssignedTasks")
  ArticleChanges ArticleChange[]
  TaskChanges    TaskChange[]

  EditedArticles Article[] @relation("ArticleEditor")

  @@map("users")
}

enum Role {
  ADMIN
  USER
}

model Task {
  id           Int          @id @default(autoincrement())
  title        String
  description  String
  images       String[] // массив URL-ов или base64
  createdAt    DateTime     @default(now())
  plannedDate  DateTime
  priority     TaskPriority
  status       TaskStatus   @default(CURRENT)
  assignedTo   User         @relation("AssignedTasks", fields: [assignedToId], references: [id])
  assignedToId Int
  createdBy    User         @relation("CreatedTasks", fields: [createdById], references: [id])
  createdById  Int
  changes      TaskChange[]

  deleted Boolean @default(false)
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum TaskStatus {
  CURRENT
  POSTPONED
  COMPLETED
}

model TaskChange {
  id     Int         @id @default(autoincrement())
  task   Task        @relation(fields: [taskId], references: [id])
  taskId Int
  user   User        @relation(fields: [userId], references: [id])
  userId Int
  date   DateTime    @default(now())
  event  ChangeEvent
}

enum ChangeEvent {
  CREATED
  UPDATED
  DELETED
}

model Article {
  id                Int      @id @default(autoincrement())
  title             String
  content           String
  images            String[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lastEditor        User     @relation("ArticleEditor", fields: [lastEditorId], references: [id])
  lastEditorId      Int
  lastEditorLogin   String   @default("неизвестно")
  changes           ArticleChange[]
  deleted           Boolean  @default(false)
}

model ArticleChange {
  id        Int         @id @default(autoincrement())
  article   Article     @relation(fields: [articleId], references: [id])
  articleId Int
  user      User        @relation(fields: [userId], references: [id])
  userId    Int
  date      DateTime    @default(now())
  event     ChangeEvent
}
